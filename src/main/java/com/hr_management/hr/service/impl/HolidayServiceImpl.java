package com.hr_management.hr.service.impl;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.hr_management.hr.entity.Holiday;
import com.hr_management.hr.exception.ResourceNotFoundException;
import com.hr_management.hr.model.HolidayDto;
import com.hr_management.hr.repository.HolidayRepository;
import com.hr_management.hr.service.HolidayService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class HolidayServiceImpl implements HolidayService {

    private static final Logger logger = LoggerFactory.getLogger(HolidayServiceImpl.class);
    
    private final HolidayRepository holidayRepository;

    @Override
    @Transactional
    public HolidayDto createHoliday(HolidayDto holidayDto, String username) {
        try {
            logger.info("Creating holiday in service: {}", holidayDto);
            
            // Validate input
            if (holidayDto == null) {
                logger.error("HolidayDto is null");
                throw new IllegalArgumentException("HolidayDto cannot be null");
            }
            
            if (holidayDto.getName() == null || holidayDto.getName().trim().isEmpty()) {
                logger.error("Holiday name is null or empty");
                throw new IllegalArgumentException("Holiday name is required");
            }
            
            if (holidayDto.getDate() == null) {
                logger.error("Holiday date is null");
                throw new IllegalArgumentException("Holiday date is required");
            }
            
            if (username == null || username.trim().isEmpty()) {
                logger.error("Username is null or empty");
                throw new IllegalArgumentException("Username is required");
            }
            
            // Create new holiday entity
            Holiday holiday = new Holiday();
            
            // Set ID to null to ensure it's generated by the database
            holiday.setId(null);
            
            // Set properties from DTO
            holiday.setName(holidayDto.getName());
            holiday.setDate(holidayDto.getDate());
            holiday.setDescription(holidayDto.getDescription());
            holiday.setRecurring(holidayDto.isRecurring());
            
            // Set audit fields
            holiday.setCreatedBy(username);
            holiday.setCreatedAt(LocalDate.now());
            holiday.setUpdatedAt(LocalDate.now());
            
            // Log the entity before saving
            logger.info("Saving holiday entity: {}", holiday);
            
            // Save the holiday
            Holiday savedHoliday = holidayRepository.save(holiday);
            
            // Log the saved entity
            logger.info("Holiday saved successfully with ID: {}", savedHoliday.getId());
            
            // Convert to DTO and return
            HolidayDto resultDto = convertToDto(savedHoliday);
            logger.info("Returning created holiday DTO: {}", resultDto);
            
            return resultDto;
        } catch (Exception e) {
            logger.error("Error creating holiday in service", e);
            throw e;
        }
    }

    @Override
    @Transactional
    public HolidayDto updateHoliday(Long id, HolidayDto holidayDto) {
        try {
            logger.info("Updating holiday with ID: {}", id);
            
            // Find the holiday
            Holiday holiday = holidayRepository.findById(id)
                    .orElseThrow(() -> new ResourceNotFoundException("Holiday", "id", id));
            
            // Update properties
            holiday.setName(holidayDto.getName());
            holiday.setDate(holidayDto.getDate());
            holiday.setDescription(holidayDto.getDescription());
            holiday.setRecurring(holidayDto.isRecurring());
            holiday.setUpdatedAt(LocalDate.now());
            
            // Save the updated holiday
            Holiday updatedHoliday = holidayRepository.save(holiday);
            logger.info("Holiday updated successfully");
            
            // Convert to DTO and return
            return convertToDto(updatedHoliday);
        } catch (Exception e) {
            logger.error("Error updating holiday", e);
            throw e;
        }
    }

    @Override
    @Transactional
    public void deleteHoliday(Long id) {
        try {
            logger.info("Deleting holiday with ID: {}", id);
            
            // Check if the holiday exists
            if (!holidayRepository.existsById(id)) {
                throw new ResourceNotFoundException("Holiday", "id", id);
            }
            
            // Delete the holiday
            holidayRepository.deleteById(id);
            logger.info("Holiday deleted successfully");
        } catch (Exception e) {
            logger.error("Error deleting holiday", e);
            throw e;
        }
    }

    @Override
    public HolidayDto getHolidayById(Long id) {
        try {
            logger.info("Getting holiday with ID: {}", id);
            
            // Find the holiday
            Holiday holiday = holidayRepository.findById(id)
                    .orElseThrow(() -> new ResourceNotFoundException("Holiday", "id", id));
            
            // Convert to DTO and return
            return convertToDto(holiday);
        } catch (Exception e) {
            logger.error("Error getting holiday", e);
            throw e;
        }
    }

    @Override
    public List<HolidayDto> getAllHolidays() {
        try {
            logger.info("Getting all holidays");
            
            // Find all holidays
            List<Holiday> holidays = holidayRepository.findAll();
            
            // Convert to DTOs and return
            return holidays.stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            logger.error("Error getting all holidays", e);
            throw e;
        }
    }

    @Override
    public List<HolidayDto> getUpcomingHolidays() {
        try {
            logger.info("Getting upcoming holidays");
            
            // Find upcoming holidays
            List<Holiday> holidays = holidayRepository.findByDateGreaterThanEqualOrderByDateAsc(LocalDate.now());
            
            // Convert to DTOs and return
            return holidays.stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            logger.error("Error getting upcoming holidays", e);
            throw e;
        }
    }

    @Override
    public List<HolidayDto> getHolidaysByDateRange(LocalDate startDate, LocalDate endDate) {
        try {
            logger.info("Getting holidays by date range: {} to {}", startDate, endDate);
            
            // Find holidays in date range
            List<Holiday> holidays = holidayRepository.findByDateBetween(startDate, endDate);
            
            // Convert to DTOs and return
            return holidays.stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            logger.error("Error getting holidays by date range", e);
            throw e;
        }
    }

    @Override
    public List<HolidayDto> getRecurringHolidays() {
        try {
            logger.info("Getting recurring holidays");
            
            // Find recurring holidays
            List<Holiday> holidays = holidayRepository.findByRecurringTrue();
            
            // Convert to DTOs and return
            return holidays.stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            logger.error("Error getting recurring holidays", e);
            throw e;
        }
    }

    private HolidayDto convertToDto(Holiday holiday) {
        try {
            logger.debug("Converting Holiday entity to DTO: {}", holiday);
            
            HolidayDto dto = HolidayDto.builder()
                    .id(holiday.getId())
                    .name(holiday.getName())
                    .date(holiday.getDate())
                    .description(holiday.getDescription())
                    .recurring(holiday.isRecurring())
                    .createdBy(holiday.getCreatedBy())
                    .createdAt(holiday.getCreatedAt())
                    .updatedAt(holiday.getUpdatedAt())
                    .build();
            
            logger.debug("Converted to DTO: {}", dto);
            return dto;
        } catch (Exception e) {
            logger.error("Error converting Holiday entity to DTO", e);
            throw e;
        }
    }
} 